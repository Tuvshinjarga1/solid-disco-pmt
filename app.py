"""
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the MIT License.
"""
import os
import uvicorn
from fastapi import FastAPI, Request, Response
from fastapi.responses import JSONResponse

from bot import process_fastapi_request, handle_test_message
from config import Config

# FastAPI app “Ø“Ø—Å–≥—ç—Ö
app = FastAPI(
    title="Teams AI Bot",
    description="Microsoft Teams AI Bot using FastAPI",
    version="1.0.0",
    docs_url="/docs",  # API documentation
    redoc_url="/redoc"  # Alternative API docs
)

@app.get("/")
async def root():
    """Health check endpoint"""
    return {"status": "healthy", "message": "Teams AI Bot is running"}

@app.post("/api/messages")
async def on_messages(request: Request) -> Response:
    """Teams bot messages endpoint - Microsoft Bot Framework"""
    # FastAPI Request-–≥ Teams AI bot —Ä“Ø“Ø –¥–∞–º–∂—É—É–ª–∞—Ö
    res = await process_fastapi_request(request)
    
    if res is not None:
        # Bot-–æ–æ—Å Response –∏—Ä–≤—ç–ª success status –±—É—Ü–∞–∞—Ö
        return JSONResponse(content={"status": "processed"}, status_code=200)
    
    return JSONResponse(content={"status": "ok"}, status_code=200)

@app.post("/api/test")
async def test_chat(request: Request) -> Response:
    """Development test endpoint - Authentication —à–∞–∞—Ä–¥–ª–∞–≥–∞–≥“Ø–π"""
    try:
        # Request body —É–Ω—à–∏–∂ –∞–≤–∞—Ö
        body = await request.json()
        user_message = body.get("message", "")
        
        if not user_message:
            return JSONResponse(
                content={"error": "Message field —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π"}, 
                status_code=400
            )
        
        # Bot response –∞–≤–∞—Ö (authentication-–≥“Ø–π–≥—ç—ç—Ä)
        bot_response = await handle_test_message(user_message)
        
        return JSONResponse(content={
            "status": "success",
            "user_message": user_message,
            "bot_response": bot_response,
            "note": "Development test mode - authentication bypass"
        })
        
    except Exception as e:
        return JSONResponse(
            content={"error": f"Test mode error: {str(e)}"}, 
            status_code=500
        )

@app.get("/health")
async def health_check():
    """Detailed health check for monitoring"""
    # Railway deployment info –Ω—ç–º—ç—Ö
    railway_url = os.environ.get("RAILWAY_PUBLIC_DOMAIN", "unknown")
    port = os.environ.get("PORT", Config.PORT)
    
    return {
        "status": "healthy",
        "service": "teams-ai-bot",
        "port": port,
        "framework": "FastAPI",
        "environment": "production" if railway_url != "unknown" else "development",
        "public_url": f"https://{railway_url}" if railway_url != "unknown" else f"http://localhost:{port}",
        "endpoints": {
            "teams_webhook": "/api/messages",
            "test_chat": "/api/test",
            "docs": "/docs"
        }
    }

# Error handling middleware
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """Global exception handler"""
    return JSONResponse(
        status_code=500,
        content={"error": "Internal server error", "detail": str(exc)}
    )

if __name__ == "__main__":
    # Railway –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã–Ω PORT environment variable –∞—à–∏–≥–ª–∞—Ö
    port = int(os.environ.get("PORT", Config.PORT))
    
    print(f"üöÄ Starting Teams AI Bot...")
    print(f"üìç Port: {port}")
    print(f"üåê Host: 0.0.0.0 (Railway compatible)")
    
    # Railway –¥—ç—ç—Ä public URL —Ö–∞—Ä—É—É–ª–∞—Ö
    railway_url = os.environ.get("RAILWAY_PUBLIC_DOMAIN")
    if railway_url:
        print(f"üîó Public URL: https://{railway_url}")
        print(f"üß™ Test endpoint: https://{railway_url}/api/test")
    else:
        print(f"üîó Local URL: http://localhost:{port}")
        print(f"üß™ Test endpoint: http://localhost:{port}/api/test")
    
    # FastAPI app-–≥ uvicorn –∞—à–∏–≥–ª–∞–Ω –∞–∂–∏–ª–ª—É—É–ª–∞—Ö
    uvicorn.run(
        "app:app",
        host="0.0.0.0",  # Railway –±–æ–ª–æ–Ω –±—É—Å–∞–¥ cloud platforms-–¥ –∞–∂–∏–ª–ª–∞—Ö—ã–Ω —Ç—É–ª–¥
        port=port,
        reload=False,  # Production-–¥ reload –∏–¥—ç–≤—Ö–≥“Ø–π
        log_level="info",
        access_log=True
    )